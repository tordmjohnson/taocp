/* eulermascheroni.bc
 * 
 * Usage:
 *
 *    echo "scale=45; obase=10;" | cat - eulermascheroni.bc | bc -l
 *
 * Euler-Mascheroni constant Gamma converges given Euler summation formula
 * for the Harmonic numbers.
 *
 *    Knuth, Donald E.
 *    The Art of Computer Programming
 *    Volume 1: Fundamental Algorithms
 *    Third Edition
 *    Upper Saddle River: Addison-Wesley, 1997.
 *    ISBN 0-201-89683-4
 *    Section 1.2.11.2.
 *
 * tmj   2012.12.20   Created.   [tord.m.johnson@gmail.com]
 */

/* Determine the Bernoulli number B_n.
 *
 *    n   The subscript to determine.
 *
 *    Returns B_n.
 *
 * Bernoulli number B_n given by Akiyama-Tanigawa algorithm:
 * 
 *    Kaneko, Masanobu
 *    The Akiyama-Tanigawa algorithm for Bernoulli numbers
 *    Journal of Integer Sequences
 *    Volume 3 (2000)
 *    Article 00.2.9
 */

define bernoulli(n) {

   auto a[], m, j;

   for (m = 0; m <= n; ++m) {
      a[m] = 1.0/(m + 1.0);
      for (j = m; j >= 1; --j) {
         a[j-1] = j * (a[j-1] - a[j]);
      }
   }
   return(a[0]);
}

/* Determine the Harmonic number H_n.
 *
 *    n   The subscript to determine.
 *
 *    Returns H_n.
 *
 * Harmonic number H_n given by definition.
 */

define harmonic(n) {

   auto sum, k;

   sum = 0;
   for (k = 1; k <= n; ++k) {
      sum += 1.0/k;
   }
   return(sum);
}

test = 1.0/(obase^scale);
iscomputed = 0;
for (n = 1; !iscomputed; ++n) {
   sum = harmonic(n) - l(n) - 1.0/(2.0*n);
   for (m = 1; m <= n; ++m) {
      error = bernoulli(2*m+2)/((2*m+2)*n^(2*m+2));
      if (((error >= 0) && (error < test)) || ((error < 0) && (-error < test))) {
         for (k = 1; k < m; ++k) {
            sum += bernoulli(2.0*k)/((2.0*k)*n^(2*k));
         }
         iscomputed = 1;
         break;
      }
   }
}
print sum;
